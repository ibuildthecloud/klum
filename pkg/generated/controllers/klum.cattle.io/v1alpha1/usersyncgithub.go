/*
Copyright 2023 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/jadolg/klum/pkg/apis/klum.cattle.io/v1alpha1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type UserSyncGithubHandler func(string, *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error)

type UserSyncGithubController interface {
	generic.ControllerMeta
	UserSyncGithubClient

	OnChange(ctx context.Context, name string, sync UserSyncGithubHandler)
	OnRemove(ctx context.Context, name string, sync UserSyncGithubHandler)
	Enqueue(name string)
	EnqueueAfter(name string, duration time.Duration)

	Cache() UserSyncGithubCache
}

type UserSyncGithubClient interface {
	Create(*v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error)
	Update(*v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error)
	UpdateStatus(*v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error)
	Delete(name string, options *metav1.DeleteOptions) error
	Get(name string, options metav1.GetOptions) (*v1alpha1.UserSyncGithub, error)
	List(opts metav1.ListOptions) (*v1alpha1.UserSyncGithubList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.UserSyncGithub, err error)
}

type UserSyncGithubCache interface {
	Get(name string) (*v1alpha1.UserSyncGithub, error)
	List(selector labels.Selector) ([]*v1alpha1.UserSyncGithub, error)

	AddIndexer(indexName string, indexer UserSyncGithubIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.UserSyncGithub, error)
}

type UserSyncGithubIndexer func(obj *v1alpha1.UserSyncGithub) ([]string, error)

type userSyncGithubController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewUserSyncGithubController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) UserSyncGithubController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &userSyncGithubController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromUserSyncGithubHandlerToHandler(sync UserSyncGithubHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.UserSyncGithub
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.UserSyncGithub))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *userSyncGithubController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.UserSyncGithub))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateUserSyncGithubDeepCopyOnChange(client UserSyncGithubClient, obj *v1alpha1.UserSyncGithub, handler func(obj *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error)) (*v1alpha1.UserSyncGithub, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *userSyncGithubController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *userSyncGithubController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *userSyncGithubController) OnChange(ctx context.Context, name string, sync UserSyncGithubHandler) {
	c.AddGenericHandler(ctx, name, FromUserSyncGithubHandlerToHandler(sync))
}

func (c *userSyncGithubController) OnRemove(ctx context.Context, name string, sync UserSyncGithubHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromUserSyncGithubHandlerToHandler(sync)))
}

func (c *userSyncGithubController) Enqueue(name string) {
	c.controller.Enqueue("", name)
}

func (c *userSyncGithubController) EnqueueAfter(name string, duration time.Duration) {
	c.controller.EnqueueAfter("", name, duration)
}

func (c *userSyncGithubController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *userSyncGithubController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *userSyncGithubController) Cache() UserSyncGithubCache {
	return &userSyncGithubCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *userSyncGithubController) Create(obj *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error) {
	result := &v1alpha1.UserSyncGithub{}
	return result, c.client.Create(context.TODO(), "", obj, result, metav1.CreateOptions{})
}

func (c *userSyncGithubController) Update(obj *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error) {
	result := &v1alpha1.UserSyncGithub{}
	return result, c.client.Update(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *userSyncGithubController) UpdateStatus(obj *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error) {
	result := &v1alpha1.UserSyncGithub{}
	return result, c.client.UpdateStatus(context.TODO(), "", obj, result, metav1.UpdateOptions{})
}

func (c *userSyncGithubController) Delete(name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), "", name, *options)
}

func (c *userSyncGithubController) Get(name string, options metav1.GetOptions) (*v1alpha1.UserSyncGithub, error) {
	result := &v1alpha1.UserSyncGithub{}
	return result, c.client.Get(context.TODO(), "", name, result, options)
}

func (c *userSyncGithubController) List(opts metav1.ListOptions) (*v1alpha1.UserSyncGithubList, error) {
	result := &v1alpha1.UserSyncGithubList{}
	return result, c.client.List(context.TODO(), "", result, opts)
}

func (c *userSyncGithubController) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), "", opts)
}

func (c *userSyncGithubController) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1alpha1.UserSyncGithub, error) {
	result := &v1alpha1.UserSyncGithub{}
	return result, c.client.Patch(context.TODO(), "", name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type userSyncGithubCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *userSyncGithubCache) Get(name string) (*v1alpha1.UserSyncGithub, error) {
	obj, exists, err := c.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1alpha1.UserSyncGithub), nil
}

func (c *userSyncGithubCache) List(selector labels.Selector) (ret []*v1alpha1.UserSyncGithub, err error) {

	err = cache.ListAll(c.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserSyncGithub))
	})

	return ret, err
}

func (c *userSyncGithubCache) AddIndexer(indexName string, indexer UserSyncGithubIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.UserSyncGithub))
		},
	}))
}

func (c *userSyncGithubCache) GetByIndex(indexName, key string) (result []*v1alpha1.UserSyncGithub, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.UserSyncGithub, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.UserSyncGithub))
	}
	return result, nil
}

type UserSyncGithubStatusHandler func(obj *v1alpha1.UserSyncGithub, status v1alpha1.UserSyncStatus) (v1alpha1.UserSyncStatus, error)

type UserSyncGithubGeneratingHandler func(obj *v1alpha1.UserSyncGithub, status v1alpha1.UserSyncStatus) ([]runtime.Object, v1alpha1.UserSyncStatus, error)

func RegisterUserSyncGithubStatusHandler(ctx context.Context, controller UserSyncGithubController, condition condition.Cond, name string, handler UserSyncGithubStatusHandler) {
	statusHandler := &userSyncGithubStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromUserSyncGithubHandlerToHandler(statusHandler.sync))
}

func RegisterUserSyncGithubGeneratingHandler(ctx context.Context, controller UserSyncGithubController, apply apply.Apply,
	condition condition.Cond, name string, handler UserSyncGithubGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &userSyncGithubGeneratingHandler{
		UserSyncGithubGeneratingHandler: handler,
		apply:                           apply,
		name:                            name,
		gvk:                             controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterUserSyncGithubStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type userSyncGithubStatusHandler struct {
	client    UserSyncGithubClient
	condition condition.Cond
	handler   UserSyncGithubStatusHandler
}

func (a *userSyncGithubStatusHandler) sync(key string, obj *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type userSyncGithubGeneratingHandler struct {
	UserSyncGithubGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *userSyncGithubGeneratingHandler) Remove(key string, obj *v1alpha1.UserSyncGithub) (*v1alpha1.UserSyncGithub, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.UserSyncGithub{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *userSyncGithubGeneratingHandler) Handle(obj *v1alpha1.UserSyncGithub, status v1alpha1.UserSyncStatus) (v1alpha1.UserSyncStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.UserSyncGithubGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
